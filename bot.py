import telebot
import texts
import keyboards
import schedule
import services
import time
from model import db, User
from apscheduler.schedulers.background import BackgroundScheduler

bot = telebot.TeleBot('1351639031:AAGbYDKNCdXQbSPCzvqpWTWQiQZNBRsnt8k')


def get_subgroup_step(message, dep_name, group_number, update=False):
    subgroup = message.text
    user_id = message.chat.id
    if update:
        user = services.get_user_model(user_id)
        user.department_name = dep_name
        user.group_number = group_number
        user.subgroup = subgroup
        user.save()
    else:
        User.create(id=user_id, department_name=dep_name, group_number=group_number, subgroup=subgroup)
    bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π', reply_markup=keyboards.dashboard())


def get_group_number_step(message, dep_name, update=False):
    group_number = message.text
    if schedule.nau.get_schedule(dep_name, group_number) == '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ!':
        bot.send_message(message.chat.id, '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(message, get_group_number_step, dep_name, update)
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥–≥—Ä—É–ø–ø—É')
        bot.register_next_step_handler(message, get_subgroup_step, dep_name, group_number, update)


def get_department_name_step(message, update=False):
    dep_name = message.text.upper()
    if schedule.DEPARTMENT_CODES.get(dep_name, None):
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã')
        bot.register_next_step_handler(message, get_group_number_step, dep_name, update)
    else:
        bot.send_message(message.chat.id, '–§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(message, get_department_name_step, update)


@bot.message_handler(commands=['start'])
def start_command_handler(message):
    if services.user_exist(message.chat.id):
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', reply_markup=keyboards.dashboard())
    else:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞')
        bot.send_message(message.chat.id, texts.DEPARTMENTS_LIST)
        bot.register_next_step_handler(message, get_department_name_step)


@bot.message_handler(commands=['8ndcvjvpk5i4'])
def admin_panel_handler(message):
    bot.send_message(message.chat.id, text='–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=keyboards.admin_panel())


@bot.message_handler(func=lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é')
def set_current_week(message):
    schedule.set_week()
    bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ')


@bot.message_handler(func=lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤')
def call_schedule_handler(message):
    bot.send_message(message.chat.id, texts.CALL_SCHEDULE)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
def back_handler(message):
    bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π', reply_markup=keyboards.dashboard())


@bot.message_handler(func=lambda message: message.text == '–ù–∞ –∑–∞–≤—Ç—Ä–∞')
def tomorrow_handler(message):
    user = services.get_user_model(message.chat.id)
    pairs = schedule.get_tomorrow_schedule(user)
    if pairs is not None:
        for pair in pairs:
            bot.send_message(user.id, pair)
    else:
        bot.send_message(user.id, '–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–πüòå')


@bot.message_handler(func=lambda message: message.text == '–ñ–∞–ª–æ–≤–∞—Ç—å—Å—è —Å—é–¥–∞')
def complain_handler(message):
    bot.send_message(message.chat.id, '–í—Å–µ –∂–∞–ª–æ–±—ã —Å—é–¥–∞ - @pyPunisher')


@bot.message_handler(func=lambda message: message.text == '–ù–∞ —Å–µ–≥–æ–¥–Ω—è')
def tomorrow_handler(message):
    user = services.get_user_model(message.chat.id)
    pairs = schedule.get_today_schedule(user)
    if pairs is not None:
        for pair in pairs:
            bot.send_message(user.id, pair)
    else:
        bot.send_message(user.id, '–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–πüòå')


@bot.message_handler(func=lambda message: message.text == '–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è')
def tomorrow_handler(message):
    bot.send_message(message.chat.id, schedule.get_current_week())


@bot.message_handler(func=lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
def schedule_days_handler(message):
    bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π', reply_markup=keyboards.schedule_days())


@bot.message_handler(func=lambda message: message.text == '–ö—Ä—É—Ç–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω')
def drum_handler(message):
    bot.send_message(message.chat.id, '–ö—Ä—É—á—É –±–∞—Ä–∞–±–∞–Ω...')
    time.sleep(1)
    bot.send_message(message.chat.id, '–°–µ–≥–æ–¥–Ω—è –Ω–µ —Ç–≤–æ–π –¥–µ–Ω—å, –ø–∏–∑–¥—É–π –Ω–∞ –ø–∞—Ä—É!')


@bot.message_handler(func=lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
def settings_handler(message):
    bot.send_message(message.chat.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=keyboards.settings())


@bot.message_handler(func=lambda message: message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç, –≥—Ä—É–ø–ø—É –∏ –ø–æ–¥–≥—Ä—É–ø–ø—É')
def set_user_data_handler(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞')
    bot.send_message(message.chat.id, texts.DEPARTMENTS_LIST)
    bot.register_next_step_handler(message, get_department_name_step, update=True)


@bot.message_handler(func=lambda message: message.text == '–†–∞—Å—Å—ã–ª–∫–∞')
def subscribe_handler(message):
    bot.send_message(message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


@bot.message_handler(regexp=r'[1/2]\.\w{3}')
def schedule_day_handler(message):
    if len(message.text) == 5:
        user = services.get_user_model(message.chat.id)
        pairs = schedule.get_schedule_per_day(user, message.text)

        for pair in pairs:
            bot.send_message(user.id, pair)


if __name__ == '__main__':

    scheduler = BackgroundScheduler()

    if db.connect():
        db.create_tables([User])

    scheduler.add_job(schedule.send_pairs_for_users,
                      'cron',
                      day_of_week='0-5',
                      hour='06',
                      minute='30',
                      args=(bot,),
                      kwargs={'morning': True}
                      )
    scheduler.add_job(schedule.send_pairs_for_users,
                      'cron',
                      day_of_week='0-5',
                      hour='20',
                      minute='30',
                      args=(bot,),
                      kwargs={'evening': True}
                      )

    scheduler.start()

    while True:
        try:
            bot.polling()
        except Exception as e:
            print(e)
            time.sleep(13)
